/*
 * Remote Sim Lock API
 *
 * **Implementation of the Remote Sim Lock APIs**  **Vibe project documentation (including RSL) can be found using the following links:**     **1- DRAFT-RSL sequence flows pictures source ZY-20220225.docx**    * https://kaios.sharepoint.com/:w:/r/sites/vibe/Shared%20Documents/4.%20PRODUCT/06%20-%20RSL%20REQ%20and%20Designing/DRAFT-RSL%20sequence%20flows%20pictures%20source%20ZY-20220225.docx?d=w8cba978f89bc4cac8460d87c0e1053ba&csf=1&web=1&e=iQp9Eo *    This document includes squence diagrams which describe the use cases: “device initiate” , “daily ping”, and “user change SIM to another one”.    **2- DRAFT-Vibe Remote SIM Lock Operation Structure-20220307.docx**    * https://kaios.sharepoint.com/:w:/r/sites/vibe/Shared%20Documents/4.%20PRODUCT/06%20-%20RSL%20REQ%20and%20Designing/DRAFT-Vibe%20Remote%20SIM%20Lock%20Operation%20Structure-20220307.docx?d=w51d49ceb6ddc4329aaa18ce02ce22318&csf=1&web=1&e=orUFfm    This is a short document which includes an introduction to the RSL operation structure, and RSL portal.    **3- RSL flow charts for communicate.v0.2.docx**    * https://kaios.sharepoint.com/:w:/r/sites/vibe/Shared%20Documents/4.%20PRODUCT/06%20-%20RSL%20REQ%20and%20Designing/RSL%20flow%20charts%20for%20communicate.v0.2.docx?d=w8215af326530486ab8b84b14e3208967&csf=1&web=1&e=H2DhdF    **4- Vibe RSL Technical Keypoints.20220915.pptx**    * https://kaios.sharepoint.com/:p:/r/sites/vibe/Shared%20Documents/4.%20PRODUCT/06%20-%20RSL%20REQ%20and%20Designing/Vibe%20RSL%20Technical%20Keypoints%20.20220915.pptx?d=w58603c5ed4814c9086a799450262b97e&csf=1&web=1&e=czrBNc    **5- Vibe Product requirement_211118.pptx**    * https://kaios-my.sharepoint.com/:p:/r/personal/raffi_semerciyan_kaiostech_com/Documents/Documents/20211124-Vibe/Vibe%20Product%20Requirement_211118.pptx?d=w130eb4dd2a74481d93cb1fec26c0d068&csf=1&web=1&e=ivj2jW    **6- Vibe-Requirements-Analysis.docx**    * https://kaios-my.sharepoint.com/:w:/g/personal/raffi_semerciyan_kaiostech_com/EXlVgqdcF7pAii8-VIHeRXQB_VQEBIbjO_2aU3Ur_Rqk1w?e=R7eaOb     This document shows the detailed design of RSL function, after making a requirement summary.      **7- Vibe-Specification.docx**   * https://kaios-my.sharepoint.com/:w:/g/personal/raffi_semerciyan_kaiostech_com/EXlVgqdcF7pAii8-VIHeRXQB_VQEBIbjO_2aU3Ur_Rqk1w?e=R7eaOb    This document shows the detailed use case diagrams which show the interaction between Vive users and the system.
 *
 * API version: 1.0.0
 * Contact: maen.hammour@kaiostech.com
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package router

import (
	"net/http"
	"strings"
	"sync"

	"git.kaiostech.com/cloud/common/config"
	"git.kaiostech.com/cloud/common/utils/handlers_common"
	"git.kaiostech.com/cloud/kc_rslbe/kc_rslbe_fe3/cred_checker"
	l4g "git.kaiostech.com/cloud/thirdparty/code.google.com/p/log4go"
	"git.kaiostech.com/cloud/thirdparty/github.com/gorilla/mux"
)

var (
	mutex      sync.Mutex
	DEFAULT_EP []string
)

type Route struct {
	Name        string
	Method      string
	Pattern     string
	HandlerFunc http.HandlerFunc
}

type Routes []handlers_common.T_Route

func NewRouter(max_req_config int, max_mem_percentage int) *mux.Router {
	mutex.Lock()
	handlers_common.Init_Throttle(max_req_config)
	handlers_common.Init_Mem_Throttle(max_mem_percentage)

	router := mux.NewRouter().StrictSlash(true)

	for _, route := range routes {

		var handler http.Handler
		var aud_list []string

		handler = route.HandlerFunc

		/*
			Wrapping with throttle controls.
		*/
		handler = handlers_common.HTTP_Throttle(handler)

		if 0 < max_mem_percentage && max_mem_percentage < 100 {
			handler = handlers_common.Memory_Throttle(handler, "FE")
		}

		// Audiences are list of End Point that are expected and accepted
		// to be found into the audience field of the JWT token.
		aud_list = route.Audiences

		if route.Pagination != nil {
			handler = route.Pagination(handler)
		}

		/*
		   Wrapping Permission check handler if permission not empty.
		*/
		if len(route.Permissions) > 0 {
			handler = handlers_common.PermChecker(handler, route.Permissions)
		}

		/*
		   Wrapping Credential check only for the routes that require it.
		*/
		if route.CredChecker != nil {
			handler = route.CredChecker(handler, aud_list)
		}

		/*
		   Wrapping logging for ALL routes to see their execution trace in log file.
		*/
		handler = handlers_common.HTTPLogger(handler, route.Name)

		// Stats API calls should not be counted into the statistics
		if !strings.HasPrefix(route.Name, "Global Performance") {
			/*
			   Accumulating performance statistics/counters for Centreon monitoring
			*/
			handler = handlers_common.HTTPStats(handler, route.Method, route.Pattern)
		}

		/*
		   Single Request Trail feature request to assign a unique ID to each incoming request.
		   This will be done in this handler below.
		*/
		handler = handlers_common.AssignReqId(handler)

		/* Wrapping context cleaning to avoid memory leak */
		handler = handlers_common.ClearContext(handler)

		if config.GetFEConfig().Common.Debug {
			l4g.Debug("NewRouter: installing route '" + route.Name + "' for pattern '" + route.Pattern + "' with method '" + route.Method + "'")
		}

		/*
		   Wrapping handler with execution timeout to limit resource consumption of micro service.
		*/
		if route.ExecTimeout != nil {
			l4g.Debug("HandlerWithTimeout: %s %s: using timeout of %v from config.", route.Method, route.Pattern, *route.ExecTimeout)
			handler = handlers_common.HandlerWithTimeout(handler, *route.ExecTimeout)
		} else {
			l4g.Debug("HandlerWithTimeout: %s %s: using timeout of %v from config.", route.Method, route.Pattern, config.GetFEConfig().FrontLayer.ExecTimeout.GetDuration())
			handler = handlers_common.HandlerWithTimeout(handler, config.GetFEConfig().FrontLayer.ExecTimeout.GetDuration())
		}

		router.
			Methods(route.Method).
			Path(route.Pattern).
			Name(route.Name).
			Handler(handler)
	}

	mutex.Unlock()

	return router
}

var routes = Routes{

	handlers_common.T_Route{
		Name:        "VibeBeDevicesRegisterPost",
		Method:      strings.ToUpper("Post"),
		Pattern:     "/kc_rsl_be/v1.0/partners/{id}/3is",
		Audiences:   DEFAULT_EP,
		CredChecker: cred_checker.RslCredChecker("v1.0"),
		Pagination:  nil,
		HandlerFunc: VibeBeDevicesRegisterPost,
		Permissions: "core#device:c",
		InputType:   nil,
		OutputType:  nil,
		TC:          nil,
	},

	handlers_common.T_Route{
		Name:        "VibeBeDevicesRslImeiPost",
		Method:      strings.ToUpper("Post"),
		Pattern:     "/kc_rsl_be/v1.0/devices/rsl/{imei}",
		Audiences:   DEFAULT_EP,
		CredChecker: cred_checker.RslCredChecker("v1.0"),
		Pagination:  nil,
		HandlerFunc: VibeBeDevicesRslImeiPost,
		Permissions: "core#device:c",
		InputType:   nil,
		OutputType:  nil,
		TC:          nil,
	},

	handlers_common.T_Route{
		Name:        "VibeBeDevicesTransferOwnershipImeiPartnerIdPost",
		Method:      strings.ToUpper("Post"),
		Pattern:     "/kc_rsl_be/v1.0/devices/transfer_ownership/{imei}/{partner_id}",
		HandlerFunc: VibeBeDevicesTransferOwnershipImeiPartnerIdPost,
		Audiences:   DEFAULT_EP,
		CredChecker: cred_checker.RslCredChecker("v1.0"),
		Pagination:  nil,
		Permissions: "core#device:c",
		InputType:   nil,
		OutputType:  nil,
		TC:          nil,
	},

	handlers_common.T_Route{
		Name:        "VibeBeDevicesTransferStateImeiPartnerIdPost",
		Method:      strings.ToUpper("Post"),
		Pattern:     "/kc_rsl_be/v1.0/devices/transfer_state/{from_imei}/{to_imei}",
		HandlerFunc: VibeBeDevicesTransferStateImeiPartnerIdPost,
		Audiences:   DEFAULT_EP,
		CredChecker: cred_checker.RslCredChecker("v1.0"),
		Pagination:  nil,
		Permissions: "core#device:c",
		InputType:   nil,
		OutputType:  nil,
		TC:          nil,
	},

	handlers_common.T_Route{
		Name:        "VibeBeDevicesUnleashImeiPost",
		Method:      strings.ToUpper("Post"),
		Pattern:     "/kc_rsl_be/v1.0/devices/unleash/{imei}",
		HandlerFunc: VibeBeDevicesUnleashImeiPost,
		Audiences:   DEFAULT_EP,
		CredChecker: cred_checker.RslCredChecker("v1.0"),
		Pagination:  nil,
		Permissions: "core#device:c",
		InputType:   nil,
		OutputType:  nil,
		TC:          nil,
	},

	handlers_common.T_Route{
		Name:        "VibeBeDevicesUpdateImeiPut",
		Method:      strings.ToUpper("Put"),
		Pattern:     "/kc_rsl_be/v1.0/devices/update/{imei}",
		HandlerFunc: VibeBeDevicesUpdateImeiPut,
		Audiences:   DEFAULT_EP,
		CredChecker: cred_checker.RslCredChecker("v1.0"),
		Pagination:  nil,
		Permissions: "core#device:c",
		InputType:   nil,
		OutputType:  nil,
		TC:          nil,
	},
}
